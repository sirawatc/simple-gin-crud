name: Continuous Integration

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: |
          set -euo pipefail
          go test -json -v -coverprofile=coverage.txt $(go list ./... | grep -E '/internal/|/pkg/') 2>&1 | tee /tmp/gotest.log | gotestfmt

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage 
          path: coverage.txt

  coverage:
    name: Coverage
    needs: unit-test
    runs-on: ubuntu-latest
    permissions:
      contents:      read
      actions:       read
      pull-requests: write
    steps:
      - name: Check target branch artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_NAME="code-coverage"

          RUN_ID=$(gh run list --status=success --branch=${{ github.event.pull_request.base.ref }} --workflow=update-coverage.yaml --json=databaseId --limit=1 -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "❌ No coverage found on branch: ${{ github.event.pull_request.base.ref }}"
            exit 0
          else
            echo "✅ Found run ID: $RUN_ID"
          fi

          EXISTS=$(gh api /repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .id")

          if [ -n "$EXISTS" ]; then
            echo "✅ Artifact '$ARTIFACT_NAME' exists"
          else
            echo "❌ Artifact '$ARTIFACT_NAME' not found"
            exit 0
          fi

      - name: Generate coverage report
        uses: fgrosse/go-coverage-report@v1.2.0

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Build application
        run: go build -o bin/main cmd/main/main.go

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Run govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run security scan
        run: govulncheck ./...
